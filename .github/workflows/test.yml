name: Test and Build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

# Set permissions for the workflow
permissions:
  contents: read
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        shell: bash
        run: |
          cd metadata-generator
          cargo test --features cli
          cargo test --features gui

      - name: Check formatting
        shell: bash
        run: |
          cd metadata-generator
          cargo fmt -- --check

      - name: Clippy check
        shell: bash
        run: |
          cd metadata-generator
          cargo clippy --features cli -- -D warnings
          cargo clippy --features gui -- -D warnings

  build-check:
    name: Build check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build CLI version
        shell: bash
        run: |
          cd metadata-generator
          cargo build --release --features cli

      - name: Build GUI version
        shell: bash
        run: |
          cd metadata-generator
          cargo build --release --features gui 